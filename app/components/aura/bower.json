{
  "name": "aura",
  "version": "0.0.0",
  "main": "lib/aura.js",
  "dependencies": {
    "jquery": "~1.9.1",
    "underscore": "~1.4.4",
    "eventemitter2": "~0.4.11",
    "requirejs": "~2.1.4",
    "requirejs-text": "~2.0.5"
  },
  "gitHead": "6ab9a0cf87e2c7b550344c5dbe61b11164557715",
  "readme": "# Aura 0.9pre \n[![Build Status](https://travis-ci.org/aurajs/aura.png?branch=master)](https://travis-ci.org/aurajs/aura)\n\nAura is an event-driven architecture for developing scalable applications using reusable widgets. It works great with [Backbone.js](http://backbonejs.org), but is framework-agnostic, adapts many best-practice patterns for developing maintainable apps and has first-class support for modern tools like [Bower](http://bower.io), [Grunt](http://gruntjs.com) and [Yeoman](http://yeoman.io).\n\nAura has been used to develop applications like [MIT's Reap](http://www.bobholt.me/2012/09/how-it-was-built-mit-reap/) and is currently under active development.\n\n## Why Aura?\n\nWe've seen a large shift in the JavaScript community for the past 3 years, with people starting to write web apps in a much more structured way. Yet, assembling the bits and pieces and actually starting to make apps is still a challenge. Another challenge is that most of the time you end up doing the same stuff all over again : you need a way to authenticate users, give them ways to communicate, exchange ideas, work or play together. You have to integrate with external services or APIs like Facebook or Twitter.\n\nWeb apps are all about the end user experience (UI, DOM elements). The web development ecosystem is all about much more low level stuff. We need a way to package higher level abstractions and make them truly reusable, and that's what Aura is all about.\n\nNeed some more reasons to use Aura?:\n\n* It's basically **glue** for your application widgets, making it trivial to tie together a number of independently created widgets into a fully functional application.\n* A complete event-bus supporting **application-level and widget-level communication** mean you have control over what is getting triggered in your app\n* Specify an API end-point for widgets easily and just **use data-attributes to include any widget** or widgets. Minimal JavaScript for more capabilities.\n* **Abstract away utility libraries** you are using (templating, DOM manipulation) so that you can swap them out for alternatives at any time without a great deal of effort\n* Hit the ground running quickly widgets into **reusable modules using AMD**.\n* Bower is a first-class citizen in Aura, making it easier to **manage your application dependencies**\n* The web platform is moving towards using scoped styles and shadow DOM for keeping parts of your page safe from third-party content that might affect it. Aura does the same for communications by introducing per-widget **sandboxes** for your events\n* Tooling for **scaffolding** out new widgets without having to write as much boilerplate\n* Can be used with your MVC framework of choice - we're just there as a helper.\n* First-class support for the Hull.io platform. If you don't want to create a widget yourself, you can easily use them as a widget-source and create apps in less time.\n* Extensible via the extensions system, which make a good basis for a rich ecosystem around the project.\n\n\n## Concepts\n\n#### The `Aura` object\n\nYour application will be an instance of the `Aura` object.\n\nIts responsibilities are to load extensions when the app starts and clean them up when the app stops.\n\n#### Extension\n\nExtensions are loaded in your application when it starts. They allow you to add features to the application, and are available to the widgets through their `sandbox`.\n\n#### Core\n\nThe `core` implements aliases for DOM manipulation, templating and other lower-level utilities that pipe back to a library of choice. Aliases allow switching libraries with minimum impact on your application.\n\n#### Sandbox\n\nA `sandbox` is just a way to implement the [facade](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#facadepatternjavascript) pattern on top of features provided by `core`. It lets you expose the parts of a JavaScript library that are safe to use instead of exposing the entire API. This is particularly useful when working in teams.\n\nWhen your app starts, it will create an instance of `sandbox` in each of your widgets.\n\n#### Widget\n\nA widget represents a unit of a page. Each widget is independent.\nThis means that they know nothing about each other. To make them communicate, a [Publish/Subscribe (Mediator)](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#mediatorpatternjavascript) pattern is used.\n\n\n## Getting started\n\nThe simplest usable Aura app using a widget and extension can be found in our [boilerplate](https://github.com/aurajs/boilerplate) repo. We do however recommend reading the rest of the getting started guide below to get acquainted with the general workflow.\n\n#### Requirements\n\n1. [bower](http://twitter.github.com/bower/): run `npm install -g bower` if needed\n2. [grunt-cli](https://github.com/gruntjs/grunt-cli): run `npm install -g grunt-cli` if needed\n\n#### Building Aura.js\n\n1. Run `npm install` to install build dependencies.\n2. Run `bower install` to install lib dependencies.\n3. Run `grunt build` and `aura.js` will be placed in `dist/`.\n\n### Running Tests\n\n#### Browser\n\nRun `grunt`. Then visit `http://localhost:8899/spec/`.\n\n#### CLI\n\nRun `npm test`.\n\n## Creating an Application\n\nThe first step in creating an Aura application is to make an instance of `Aura`.\n\n```js\nvar app = new Aura();\n```\n\nNow that we have our `app`, we can start it.\n\n```js\napp.start({\n  widgets: 'body'\n});\n```\n\nThis starts the app by saying that it should search for widgets anywhere in the `body` of your HTML document.\n\n## Creating a Widget\n\nBy default widgets are retrieved from a directory called `widgets/` that must be at the same level as your HTML document.\n\nLet's say we want to create an \"hello\" widget. To do that we need to create a `widgets/hello/` directory\n\nThis directory must contain:\n\n- A `main.js` file. It will bootstrap and describe the widget. It is mandatory, no matter how small it can be.\n- All the other files that your widget needs (models, templates, â€¦).\n\nFor our \"hello\" widget the `main.js` will be:\n\n```js\ndefine({\n  initialize: function () {\n    this.$el.html('<h1>Hello Aura</h1>');\n  }\n});\n```\n\n## Declaring a Widget\n\nAdd the following code to your HTML document.\n\n```html\n<div data-aura-widget=\"hello\"></div>\n```\n\nAura will call the `initialize` method that we have defined in `widgets/hello/main.js`.\n\n## Creating an extension\n\nImagine that we need an helper to reverse a string. In order to accomplish that we'll need to create an extension.\nBy default extension are retrieved from a directory called `extensions/` that must be at the same level as your HTML document.\n\n```js\ndefine('extensions/reverse', {\n  initialize: function (app) {\n    app.core.util.reverse = function (string) {\n      return string.split('').reverse().join('');\n    };\n  }\n});\n```\n\n## Emitting and listening for event notifications\n\nThe Aura [Mediator](https://github.com/aurajs/aura/blob/master/lib/ext/mediator.js) allows widgets to communicate with each other by subscribing, unsubscribing and emitting sandboxed event notifications. The signatures for these three methods are:\n\n* `sandbox.on(name, listener, context)`\n* `sandbox.off(name, listener)`\n* `sandbox.emit(data)`\n\nBelow we can see an example of a Backbone view using the Mediator to emit a notification when tasks have been cleared and subscribing to changes from `tasks.stats` in order to render when they are updated.\n\n```js\ndefine(['hbs!./stats'], function(template) {\n  return {\n    type: 'Backbone',\n    events: {\n      'click button': 'clearCompleted'\n    },\n    initialize: function() {\n      this.render();\n      this.sandbox.on('tasks.stats', _.bind(this.render, this));\n    },\n    render: function(stats) {\n      this.html(template(stats || {}));\n    },\n    clearCompleted: function() {\n      this.sandbox.emit('tasks.clear');\n    }\n  }\n});\n```\n\n## Using extensions\n\nTo make our `reverse` helper available in our app, run the following code:\n\n```js\napp.use('extensions/reverse');\n```\n\nThis will call the `initialize` function of our `reverse` extension.\n\nCalling `use` when your `app` is already started will throw an error.\n\n## Debugging\n\nTo enable debug extension and logging pass `{debug: {enable: true}}` into Aura constructor:\n\n```js\nvar app = new Aura({debug: {\n  enable: true\n});\n```\nLogger usage:\n\n```js\n// You can use logger from widgets or extensions\nvar logger = sandbox.logger;\n\nlogger.log('Hey');\nlogger.warn('Hey');\nlogger.error('Hey');\n\n//Or directly from Aura app\n\nvar logger = app.logger;\n```\nBelow we can see an example how to enable logging in specific ext/widgets.\nBy default all loggers are enabled.\n\n```js\nvar app = new Aura({debug: {\n  enable: true,\n  components: 'aura:mediator login signup info'\n});\n```\n\nBuilt-in components:\n\n* aura:mediator - event logging.\n\nAlso, when `debug mode` is enabled, you can declare following function for any debug purposes:\n\n```js\n// Function will be called for all Aura apps in your project\nwindow.attachDebugger = function (app) {\n  // Do cool stuff with app object\n  console.log(app);\n\n  // Maybe you want to have access to Aura app via developer console?\n  window.aura = app;\n};\n```\n\n\n# Resources\n\n## Yeoman generator\n\nAn Aura scaffolding generator (for Yeoman) is also available at [Aura generator](https://github.com/dotCypress/generator-aura).\n\n## Usage\n\n```bash\n  # First make a new directory, and `cd` into it:\n  mkdir my-awesome-project && cd $_\n\n  # Then install `generator-aura`:\n  npm install -g generator-aura\n\n  # Run `yo aura`, optionally passing an app name:\n  yo aura [app-name]\n\n  # Finally, install npm and bower dependencies:\n  npm install && bower install --dev\n```\n\n## Generators\n\nAvailable generators:\n\n* [aura:widget](#widget)\n* [aura:extension](#extension)\n* [aura:styles](#styles)\n\n### Widget\nGenerates a widget in `app/widgets`.\n\nExample:\n\n```bash\nyo aura:widget sample\n```\n\nProduces `app/widgets/sample/main.js`\n\n### Extension\nGenerates a extension in `app/extensions`.\n\nExample:\n```bash\nyo aura:extension storage\n```\n\nProduces `app/extensions/storage.js`\n\n### Styles\nGenerates cool styles.\n\nExample:\n```bash\nyo aura:styles\n```\n\n##### Supported types:\n\n* Default (normalize.css)\n* Twitter Bootstrap\n* Twitter Bootstrap for Compass\n* Zurb Foundation\n\n\n# Examples\n\nWant to look at some sample apps built with Aura? Check out:\n\n###The [GitHub client](https://github.com/sbellity/aura-github)\n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/github-app.png\"  width=\"600px\"/>\n\n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/github-app2.png\"  width=\"600px\"/>\n\n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/github-app3.png\"  width=\"600px\"/>\n\n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/github-app4.png\"  width=\"600px\"/>\n\n\n###The [GitHub Mobile client](https://github.com/hull/Github-Mobile/tree/with-hull)\n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/github-mobile.png\"/>\n\n\n###[Hullagram](https://github.com/hull/hullagram) - an Instagram clone built with Aura and [Hull.io](http://hull.io).\n\n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/hullagram-1.png\"/>\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/hullagram-2.png\"/>\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/hullagram-3.png\"/>\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/hullagram-4.png\"/>\n\n\n###An Aura [TodoMVC](https://github.com/sbellity/aura-todos/) app implemented [two](https://github.com/alexanderbeletsky/todomvc-aura) ways \n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/todomvc.png\"/>\n\n\n### [How to build your own Twitter-like \"Open Source\" page](http://blog.hull.io/post/46504817377/how-to-build-your-own-twitter-like-open-source-page) using Aura. \n\n<img src=\"https://raw.github.com/aurajs/aura-identity/master/screenshots/medium/opensource-page.png\" width=\"600px\"/>\n\n\n###Writing a simple [GitHub widget](https://gist.github.com/sbellity/b44364f29fd89679ca39) using Aura.\n\n### Aura Development docs\n\n* [Notes](https://github.com/aurajs/aura/tree/master/notes)\n\n# FAQs\n\n* [Where does Aura fit in the MVC workflow?](https://github.com/aurajs/aura/issues/223)\n* [How do you initialize a widget with with data objects?](https://github.com/aurajs/aura/issues/222)\n* [Using multiple views and models in a widget](https://github.com/aurajs/aura/issues/224)\n* [Sharing collections of data](https://github.com/karlwestin/aura-example)\n\n\n# Why do developers use us?\n\n* \"The architecture and the fact that Aura Widgets are completely decoupled, will allow us to build an ecosystem of widgets that people can reuse internally or share with others.\"\n* \"With WidgetSources and Require, we can load only the widgets that are needed by the app... at runtime.\"\n* \"No JS is required to wire everything up, just include widgets with data-attributes in their markup\"\n* \"Mediation, same thing here it's a prerequisite to make everything decoupled... but in addition, it allows us to write much less code...\"\n* \"Template overrides FTW\"\n\n# Contribute\n\nSee the [contributing docs](https://github.com/aurajs/aura/blob/master/contributing.md)\n\n# Project status\n\nAura 0.8.x was well received by the developer community, but had regular requests for a few advanced capabilities. These included individual sandboxes, declarative widgets, support for Bower and a powerful Pub/Sub implementation amongst others.\n\nTo cater for this, Aura has been getting a heavy re-write over the past few months and we anticipate releasing a beta that can be tested in April, 2013. This will be followed by detailed documentation and new demo applications.\n\nA version of Aura currently powers the [Hull.io](http://hull.io) widget platform and we are honored to have members of that team directly contributing to the next version of the project.\n",
  "readmeFilename": "README.md",
  "_id": "aura@0.9.0",
  "description": "[![Build Status](https://travis-ci.org/aurajs/aura.png?branch=master)](https://travis-ci.org/aurajs/aura)",
  "commit": "6ab9a0cf87e2c7b550344c5dbe61b11164557715",
  "repository": {
    "type": "git",
    "url": "git://github.com/aurajs/aura"
  }
}